/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lab1_camargo_marquez;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Point;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author JesusCamargo
 */
public class ViewFrame extends javax.swing.JFrame {

    /**
     * Creates new form ViewFrame
     */
    public ViewFrame() {
        initComponents();
        this.setTitle("Lab. 1 - Jesus Camargo, Henry Marquez");
        treeScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        treeScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        treeScrollPane.setMinimumSize(treeScrollPane.getSize());
        verifyButton.setEnabled(false);
        this.pack();
        //TreeCanvas tc = new TreeCanvas();
        //treeCanvas.setVisible(true);
        //treeCanvas.setSize(250,250);
        //tc.drawArbol(treePanel.getGraphics(), null);
        /*Graphics g = treeCanvas.getGraphics();
        g.setColor(Color.BLACK);
        g.fillOval(50, 25, 100, 100);
        treeCanvas.paintAll(g);*/
        
        //displayTree(treeCanvas.getGraphics());
        //displayTree(treePanel.getGraphics());
        //treeCanvas.paint(g);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        regexButton = new javax.swing.JButton();
        regexTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        alphabetLabel = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        treeTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        posTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        dfaTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        verifyTextField = new javax.swing.JTextField();
        verifyButton = new javax.swing.JButton();
        verifyLabel = new javax.swing.JLabel();
        treeScrollPane = new javax.swing.JScrollPane();
        treePanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setSize(new java.awt.Dimension(1025, 600));

        regexButton.setText("Enter Regex");
        regexButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regexButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Regex:");

        treeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(treeTable);

        jTabbedPane1.addTab("First-Last pos.", jScrollPane1);

        posTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(posTable);

        jTabbedPane1.addTab("Follow pos.", jScrollPane2);

        dfaTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(dfaTable);

        jTabbedPane1.addTab("D.F.A.", jScrollPane3);

        jLabel2.setText("Text to verify:");

        verifyButton.setText("Verify");
        verifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout treePanelLayout = new javax.swing.GroupLayout(treePanel);
        treePanel.setLayout(treePanelLayout);
        treePanelLayout.setHorizontalGroup(
            treePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 689, Short.MAX_VALUE)
        );
        treePanelLayout.setVerticalGroup(
            treePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 526, Short.MAX_VALUE)
        );

        treeScrollPane.setViewportView(treePanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(verifyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(4, 4, 4)
                                        .addComponent(verifyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(alphabetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 60, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(18, 18, 18)
                                        .addComponent(regexTextField))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(verifyTextField))))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(regexButton)))
                        .addGap(26, 26, 26))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                        .addGap(44, 44, 44)))
                .addComponent(treeScrollPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(regexTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(regexButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(verifyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(verifyButton)
                                .addGap(15, 15, 15)
                                .addComponent(alphabetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(verifyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(treeScrollPane)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void regexButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regexButtonActionPerformed
        // TODO add your handling code here:
        dfa = new DFA(regexTextField.getText());
        st = dfa.getSt();
        alphabetLabel.setText("Alphabet: "+st.getAlphabet());
        //treePanel.setPreferredSize(new Dimension(treePanel.getWidth()+1000,treePanel.getHeight()+1000));
        String[] treeColumnNames = {"Node", "First Pos.","Last Pos."};
        String[][] treeData = new String[st.getNodes()][3];
        Queue<Node> nodes = new LinkedList<>();
        nodes.add(st.getRoot());
        for (String[] strings : treeData) {
            Node t = nodes.poll();
            strings[0]=t.toString();
            strings[1]=t.getFirstPos().toString();
            strings[2]=t.getLastPos().toString();
            if (t.getRight() != null) {
                nodes.add(t.getLeft());
                nodes.add(t.getRight());
            }else{
                if (t.getLeft() != null) {
                    nodes.add(t.getLeft());
                }
            }
        }
        treeTable.setModel(new DefaultTableModel(treeData,treeColumnNames));
        
        String[] posColumnNames ={"Node","Pos.","Follow pos."};
        String[][] posData = new String[st.getLeaves()][3];
        for (int i = 1; i <= st.getLeaves(); i++) {
            Node temp = SyntaxTree.getNodeById(i, st.getRoot());
            if (temp != null) {
                posData[i-1][0] = temp.toString();
                posData[i-1][1] = Integer.toString(i);
                posData[i-1][2] = temp.getFollowPos().toString();
            }else{
                System.out.println("id " + i + " not exist");
            }
        }
        posTable.setModel(new DefaultTableModel(posData,posColumnNames));
        
        String[] dfaColumnNames = new String[st.getAlphabet().contains("&")? 1+st.getAlphabet().size():2+st.getAlphabet().size()];
        dfaColumnNames[0]="State";
        dfaColumnNames[1]="Pos. set";
        for (int i = 2; i < dfaColumnNames.length; i++) {
            dfaColumnNames[i] = st.getAlphabet().get(st.getAlphabet().contains("&")? i-1 : i-2);
        }
        String[][] dfaData = new String[dfa.getdStates().size()][dfaColumnNames.length];
        for (int i = 0; i < dfaData.length; i++) {
            ArrayList<Integer> t = (ArrayList)dfa.getdStates().get(i)[1];
            dfaData[i][0] = t.contains(st.getLeaves()) ?
                    dfa.getdStates().get(i)[0].toString()+"->" :
                    dfa.getdStates().get(i)[0].toString();
            dfaData[i][0] = dfa.getdStates().get(i)[0].toString().equals("s0") ?
                    "->"+dfaData[i][0]:
                    dfaData[i][0];
            dfaData[i][1] = t.toString();
            ArrayList<String[]> transitions = dfa.getdTran().get(dfaData[i][0]);
            for (int j = st.getAlphabet().contains("&")? 1 : 0; j < st.getAlphabet().size(); j++) {
                String str = st.getAlphabet().get(j);
                if (transitions != null) {
                    for (String[] transition : transitions) {
                        if (transition[0].equals(str)) {
                            dfaData[i][st.getAlphabet().contains("&")? j+1 : j+2] = transition[1];
                        }
                    }
                }
            }
        }
        System.out.println("leaves: " + st.getLeaves());
        dfaTable.setModel(new DefaultTableModel(dfaData,dfaColumnNames));
        
        verifyButton.setEnabled(true);
        TreeView tView = new TreeView(st);
        Dimension d = new Dimension(((tView.getWidth()*4/5)+st.levels*9)*st.levels,st.levels*50+100);
        tView.setBackground(this.getBackground());
        tView.setPreferredSize(d);
        //tView.setSize(d);
        System.out.println(tView.getPreferredSize() + " x: " + ((tView.getWidth()*4/5)+st.levels*15)*st.levels + " y: " + st.levels*50);
        /*Graphics g =treePanel.getGraphics(); 
        g.clearRect(0, 0, treePanel.getWidth(), treePanel.getHeight());
        g.drawRect(0, 0, treePanel.getWidth()-1, treePanel.getHeight()-1);
        //Node t = new Node("1",new Node("2",new Node("4"),new Node("5")),new Node("3",new Node("6"),new Node("7")));
        displayTree(g,st.getRoot(), st.levels,null, new Point((4*treePanel.getWidth()/5),20));
        //displayTree(g,st.getRoot(),null, new Point((3*treePanel.getWidth())/4,40));*/
        treeScrollPane.setViewportView(tView);
        SwingUtilities.invokeLater(() -> {
            //treeScrollPane.setViewport(tView);
            treeScrollPane.getViewport().setViewPosition(new Point(5*tView.getWidth()/6,0));
            /*treeScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
            treeScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);*/
            //treeScrollPane.validate();
            //System.out.println("scroll " + treeScrollPane.getPreferredSize());
            treeScrollPane.revalidate();
        });
    }//GEN-LAST:event_regexButtonActionPerformed

    private void verifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifyButtonActionPerformed
        // TODO add your handling code here:
        String verifyText = verifyTextField.getText();
        if (!verifyText.isEmpty() && dfa.generates(verifyText)) {
            verifyLabel.setText("Valid text.");
        }else{
            verifyLabel.setText("Non-valid text.");
        }
    }//GEN-LAST:event_verifyButtonActionPerformed
    private void displayTree(final Graphics g,Node root,int offset, Point p0, Point p1){
        if(root != null){
            //System.out.println("Node: " + root + ", " + offset);
            g.setColor(Color.black);
            //p1 = new Point(p1.x+offset,p1.y+40);
            g.fillOval(p1.x-10, p1.y-10, 20, 20);
            
            if (p0 != null) {
                g.drawLine(p0.x, p0.y, p1.x, p1.y);
            }else{
                //offset=offset/3;
            }
            //treeScrollPane.setViewportView(treePanel);
            /*if (root.getRight() != null){
                displayTree(g,root.getLeft(),offset/3,new Point(p1.x, p1.y),new Point(p1.x/2,p1.y+20));
                displayTree(g,root.getRight(),2*p1.x/3,new Point(p1.x, p1.y),new Point(p1.x/2,p1.y+20));
            }else{
                displayTree(g,root.getLeft(),offset/3,new Point(p1.x, p1.y),new Point(p1.x,p1.y+20));
            }*/
            if (root.getRight() != null){
                displayTree(g,root.getLeft(),offset-1,new Point(p1.x, p1.y),new Point(p1.x-offset*15,p1.y+40));
                displayTree(g,root.getRight(),offset-1,new Point(p1.x, p1.y),new Point(p1.x+offset*15,p1.y+40));
            }else{
                displayTree(g,root.getLeft(),offset-1,new Point(p1.x, p1.y),new Point(p1.x,p1.y+40));
            }
            g.setColor(Color.white);
            g.drawString(root.getStr(), p1.x, p1.y+5);
            if(root.getId() != -1){
                g.setColor(Color.red);
                g.drawString(Integer.toString(root.getId()), p1.x+10, p1.y+5);    
            }
            //VERSION 2
            /*g.setColor(Color.black);
            p1 = new Point(p1.x+offset,p1.y);
            g.fillOval(p1.x-10, p1.y-10, 20, 20);
            
            if (p0 != null) {
                g.drawLine(p0.x, p0.y, p1.x, p1.y);
            }
            
            if (root.getRight() != null){
                displayTree(g,root.getLeft(),p0 == null ? offset/3 : offset,new Point(p1.x, p1.y),new Point(p1.x/2,p1.y+40));
                displayTree(g,root.getRight(),p1.x,new Point(p1.x, p1.y),new Point(p1.x/4,p1.y+40));
            }else{
                displayTree(g,root.getLeft(),p1.x,new Point(p1.x, p1.y),new Point(0,p1.y+40));
            }
            g.setColor(Color.white);
            g.drawString(root.getStr(), p1.x, p1.y+5);
            if(root.getId() != -1){
                g.setColor(Color.red);
                g.drawString(Integer.toString(root.getId()), p1.x+10, p1.y+5);    
            }*/
            //VERSION 3
            /*g.setColor(Color.black);
            g.fillOval(p1.x-10, p1.y-10, 20, 20);
            if (p0 != null) {
                g.drawLine(p0.x, p0.y, p1.x, p1.y);
            }
            if (root.getRight() != null) {
                displayTree(g, root.getLeft(),!odd,p1,new Point(odd? p1.x-50: p1.x-30,p1.y+40));
                displayTree(g, root.getRight(),!odd,p1,new Point(p0 == null? p1.x : odd? p1.x+50:p1.x+30,p1.y+40));
            }else{
                displayTree(g,root.getLeft(),!odd,p1,new Point(p1.x,p1.y+40));
            }
            g.setColor(Color.white);
            g.drawString(root.getStr(), p1.x, p1.y+5);
            if(root.getId() != -1){
                g.setColor(Color.red);
                g.drawString(Integer.toString(root.getId()), p1.x+10, p1.y+5);    
            }
            g.setColor(Color.blue);
            g.drawString(root.getFirstPos().toString(), p1.x+10, p1.y+10);
            g.setColor(Color.darkGray);
            g.drawString(root.getLastPos().toString(), p1.x+10, p1.y+15);*/
        }
        
    }
    private void displayTree(final Graphics g,Node root){//16 string height
        Queue<Node> queue = new LinkedList<>();
        int nodesInLevel = 0;
        int nodesNextLevel = 0;
        int i=0;
        queue.add(root);
        nodesInLevel++;
        while(i < nodesInLevel){
            
        }
    }
    
    public static void main() {
        /* Set the Nimbus look and feel: 
            Metal
            Nimbus
            CDE/Motif
            Windows
            Windows Classic
        */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ViewFrame().setVisible(true);
        });
    }
    SyntaxTree st = null;
    DFA dfa = null;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel alphabetLabel;
    private javax.swing.JTable dfaTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable posTable;
    private javax.swing.JButton regexButton;
    private javax.swing.JTextField regexTextField;
    private javax.swing.JPanel treePanel;
    private javax.swing.JScrollPane treeScrollPane;
    private javax.swing.JTable treeTable;
    private javax.swing.JButton verifyButton;
    private javax.swing.JLabel verifyLabel;
    private javax.swing.JTextField verifyTextField;
    // End of variables declaration//GEN-END:variables
}
